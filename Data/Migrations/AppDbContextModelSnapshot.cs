// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AcquisitionDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("AcquisitionTime")
                        .HasColumnType("time");

                    b.Property<long>("BitsAllocated")
                        .HasColumnType("bigint");

                    b.Property<long>("Columns")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("InstanceNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("Rows")
                        .HasColumnType("bigint");

                    b.Property<string>("SOPClassUID")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("SOPInstanceUID")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Images", t =>
                        {
                            t.HasCheckConstraint("CK_Image_BitsAllocated", "BitsAllocated >= 0");

                            t.HasCheckConstraint("CK_Image_Columns", "Columns >= 0");

                            t.HasCheckConstraint("CK_Image_InstanceNumber", "InstanceNumber >= 0");

                            t.HasCheckConstraint("CK_Image_Rows", "Rows >= 0");
                        });
                });

            modelBuilder.Entity("Core.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateOnly>("PatientBirthDate")
                        .HasColumnType("date");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PatientSex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.Property<long?>("PatientSize")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientWeight")
                        .HasColumnType("bigint");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Patients", t =>
                        {
                            t.HasCheckConstraint("CK_Patient_PatientSex", "PatientSex IN ('M', 'F')");

                            t.HasCheckConstraint("CK_Patient_PatientSize", "PatientSize IS NULL OR PatientSize >= 0");

                            t.HasCheckConstraint("CK_Patient_PatientWeight", "PatientWeight IS NULL OR PatientWeight >= 0");
                        });
                });

            modelBuilder.Entity("Core.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MobileNumber")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Core.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Modality")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SeriesDescription")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("SeriesInstanceUID")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("SeriesTime")
                        .HasColumnType("time");

                    b.Property<int>("StudyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StudyId");

                    b.ToTable("Series", t =>
                        {
                            t.HasCheckConstraint("CK_Series_SeriesNumber", "SeriesNumber >= 0");
                        });
                });

            modelBuilder.Entity("Core.Models.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StudyDate")
                        .HasColumnType("date");

                    b.Property<string>("StudyDescription")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(256)");

                    b.Property<long?>("StudyId")
                        .HasColumnType("bigint");

                    b.Property<string>("StudyInstanceUID")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<TimeOnly>("StudyTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Studies", t =>
                        {
                            t.HasCheckConstraint("CK_Study_StudyId", "StudyId IS NULL OR StudyId >= 0");
                        });
                });

            modelBuilder.Entity("Core.Models.Image", b =>
                {
                    b.HasOne("Core.Models.Series", "Series")
                        .WithMany("Images")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Core.Models.Patient", b =>
                {
                    b.HasOne("Core.Models.Person", "Person")
                        .WithOne()
                        .HasForeignKey("Core.Models.Patient", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Core.Models.Series", b =>
                {
                    b.HasOne("Core.Models.Study", "Study")
                        .WithMany("Series")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Study");
                });

            modelBuilder.Entity("Core.Models.Study", b =>
                {
                    b.HasOne("Core.Models.Patient", "Patient")
                        .WithMany("Studies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Core.Models.Patient", b =>
                {
                    b.Navigation("Studies");
                });

            modelBuilder.Entity("Core.Models.Series", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Core.Models.Study", b =>
                {
                    b.Navigation("Series");
                });
#pragma warning restore 612, 618
        }
    }
}
